#!/usr/bin/env ruby
#
# git-select #story-id
#
#   Looks up your current branches for the first occurence of
#   the story-id and checkout it
#
#
# Copyright (C) 2012 Julien Letessier
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
require 'rubygems'
require 'term/ansicolor'

# Helper functions
def git_dir?
  `git config --get remote.origin.url`.strip == ''
end

def process(branches)
  branches.split("\n").map { |branch| branch.strip.gsub(%r(\* ), '')}
end

def select(branches, story_id)
  branches.select { |branch| branch =~ /#{story_id}/ }
end


if git_dir?
  puts "Not a valid git repo"
  exit 1
end

if ARGV[0] && ARGV[0] =~ /^\d+$/
  story_id = ARGV[0]
else
  puts "story-id is not a number"
  exit 1
end


# Find locally first
locals = process(`git branch`)

# Select matching locals
found  = select(locals, story_id)

case found.size
when 0
  puts Term::ANSIColor.yellow 'Failed lookup on local branches'
when 1
  `git checkout #{found.first}`
  exit 0
else
  puts "Found #{found.size} matches on locals:"
  found.each do |branch|
    puts "  #{branch}"
  end
  exit 1
end

# Find remote branch
remotes = process(`git branch -a`)

# Select matching remotes
found   = select(remotes, story_id)

case found.size
when 0
  puts Term::ANSIColor.yellow 'Failed lookup on remote branches'
else
  puts "Found #{found.size} matches on remotes:"
  found.each do |branch|
    puts "  #{branch.gsub(%r(^remotes/origin/), "")}"
  end
  exit 1
end

