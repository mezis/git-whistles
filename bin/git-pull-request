#!/usr/bin/env ruby
#
# git-pull-request --
# 
#   Open a pull request for the current branch in your default browser
# 
#   Assumes the branches are named
#   <team>/<branch-title>-<story-id>
# 
# Copyright (C) 2012 Julien Letessier
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# require 'CGI'
require 'rubygems'
require 'pivotal-tracker'
require 'term/ansicolor'

origin_url = `git config --get remote.origin.url`.strip
unless origin_url =~ /github\.com/
  puts "origin does not have a Github URL !"
  exit 1
end

repo = origin_url.sub(/.*github\.com[\/:]/,'').sub(/\.git$/,'')

if ARGV[0]
  branch = ARGV[0]
else
  branch = `git symbolic-ref HEAD`.gsub(%r(^refs/heads/), "")
  exit $? unless $? == 0
end

if branch == 'master'
  puts "You cannot issue a pull request for master !"
  exit 1
end

against = ARGV[1] || 'master'

# build the base query
query = {
  :base_repo => repo,
  :base_ref  => against,
  :head_ref  => branch
}

# guess team name
if branch =~ %r{^(\w+)/.*}
  team = $1.capitalize
end

# guess title.
title = branch.split('/').last.split(/[_-]/).delete_if { |word| word =~ /^\d+$/ }.join(' ').capitalize
query[:title] = "#{team}: #{title}"

# find the PT story, or fall back to the branch-name-based titling
if branch =~ /(\d+)$/
  story_id = $1.to_i
  token = `git config pivotal-tracker.token`.strip
  if token.empty?
    puts Term::ANSIColor.yellow %Q{
      I don't know your Pivotal Tracker token!
      Please set it with:
      $ git config pivotal-tracker.token <token>
    }
    exit 1
  else
    $stdout.write Term::ANSIColor.green "Finding your project and story "
    $stdout.flush

    PivotalTracker::Client.token = token
    story, project = PivotalTracker::Project.all.find do |project|
      $stdout.write Term::ANSIColor.green '.'
      $stdout.flush
      story = project.stories.find(story_id) and break story, project
    end
    $stdout.puts

    if story.nil?
      puts Term::ANSIColor.yellow "Apologies... I could not find story #{story_id}."
    else
      $stdout.puts Term::ANSIColor.green "Found story #{story_id} in '#{project.name}'"

      headline = "Pivotal tracker story [##{story_id}](#{story.url}) in project *#{project.name}*:"
      description = story.description.split("\n").map { |line| "> #{line}" }.join("\n")
      body = "#{headline}\n\n#{description}"
      title = "#{project.name}: #{story.name} [##{story.id}]"

      query.merge! :subject => story.name, :body => body, :title => title
    end
  end
end

query_string = query.map { |key,value| "#{CGI.escape key.to_s}=#{CGI.escape value}"}.join('&')
url = "https://github.com/#{repo}/pull/new?#{query_string}"
puts "Preparing a pull request for branch #{branch}"

unless `which xdg-open`.strip.empty?
  system "xdg-open", url
else
  system "open", url
end
